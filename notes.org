* TODOS
** TODO c++20
*** TODO async, atomic shared pty
** DONE end threads via a (shared?) future
** TODO parallelize simulation per tick?
** TODO optimize simulation generally
** TODO move simulation out of space
** TODO google build / deps system
** TODO leverage tl lib - tl::optional, .map, .and_then
** TODO thread exception handling
   - https://stackoverflow.com/questions/233127/how-can-i-propagate-exceptions-between-threads
** TODO thingy to get sim accuracy
   - run the simulation over & over at different time steps and look at eg 5-6 seconds and compare positions. narrow in on a ts that gives <N% variance or something
** TODO report ticks / sec (perf) and using dt give a real-world time
** TODO planet path breadcrumbs
** TODO planet velocity indicators?
** TODO real graphics
** TODO 3d
** TODO asserts
** TODO move simulation, dt out of space. is space even a good abstraction? probably not
** TODO use clang-tidy (apt install clang-tidy)
   - clang-tidy -header-filter=.* -checks=*,-fuchsia* ../src/space.cpp


* tools etc
** clang-format on only a block?
** clang-modernize
** clang-check?, clang-cl?, clang-replace?, clang-tidy?
** clang++ --analyze -Xanalyzer -analyzer-output=text x.cpp
** clang++ -g -fsantize=address{,-full (expensive)} (for debug build?)
** clang++ -g -fsantize=thread (for debug build?)
** clang++ -g -fsantize=memory (for debug build?) (expensive)
** clang++ -g -fsantize=behavior (for debug build?)
** more??

* notes
** override keyword
** virtual destructor
** "dont use delete as the instigator for the synchronized destruction of an object"

* questions
** lock_guard vs unique_lock

* cmake/conan
** how to
*** bear
    bear make etc from build, mv to proj root
*** install deps
    from build/: conan install ..
*** add deps
    add to conanfile.txt
*** compile
    after running cmake first time
    from build/: make
*** add a new file
    add it to src/CMakeLists.txt, then rerun cmake
*** run cmake
    from build/: cmake -DCMAKE_CXX_COMPILER=clang++ ..
